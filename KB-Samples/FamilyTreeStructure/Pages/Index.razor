@page "/"

@using Syncfusion.Blazor.Diagram
<style>
    #diagram {
        display: block;
    }

    .image-pattern-style {
        background-color: white;
        background-size: contain;
        background-repeat: no-repeat;
        width: 140px;
        height: 180px;
        cursor: pointer;
        border: 1px solid #D5D5D5;
        background-position: center;
        float: left;
    }

        .image-pattern-style:hover {
            border-color: gray;
            border-width: 2px;
        }

    .row {
        margin-left: 0px;
        margin-right: 0px;
        display: block;
    }

    .property-panel-header {
        padding-top: 15px;
        padding-bottom: 5px;
        font-weight: 600;
        font-size: 15px;
    }

    .row-header {
        font-size: 13px;
        font-weight: 600;
    }

    .row-header1 {
        font-size: 12px;
        padding-left: 2px;
        font-weight: 400;
    }

    .e-selected-orientation-style {
        border-color: #006CE6;
        border-width: 2px;
    }


    .e-selected-pattern-style {
        border-color: #006CE6;
        border-width: 2px;
    }

    .textboxstyle {
        padding-left: 0px;
        padding-right: 0px;
        float: left;
        width: 120px;
    }

    .e-checkbox-wrapper .e-label {
        font-size: 12px;
    }

    .col-xs-6 {
        padding-left: 0px;
        padding-right: 0px;
    }

    .sb-property-border {
        border-right: 1px solid #D7D7D7;
    }

    .e-orgchart-template-div-style {
        position: absolute;
        border: 1px solid black;
        width: 140px;
        height: 200px;
        box-sizing: border-box;
        border-radius: 5px;
    }

    .e-orgchart-template-image-style {
        width: 140px;
        height: 180px;
        left: 552px;
        top: 154px;
        float: left;
        background-size: 100% 100%;
    }

    .e-orgchart-template-name-style {
        font-family: Roboto;
        font-style: normal;
        font-weight: 500;
        font-size: 14px;
        line-height: 14px;
        letter-spacing: 0.1px;
        color: #363636;
        margin-top: 8px;
        height: 8px
    }

    .e-orgchart-template-role-style {
        font-family: Roboto;
        font-style: normal;
        font-weight: 400;
        font-size: 10px;
        line-height: 14px;
        letter-spacing: 0.1px;
        color: #7A7A7A;
    }
</style>
<SfDiagramComponent @ref="diagram" Height="1000px" NodeCreating="@OnNodeCreating" ConnectorCreating="@OnConnectorCreating">
    <DiagramTemplates>
        <NodeTemplate>
            @{
                    Node node1 = (context as Node);
                    string Name = (node1.Data as ComplexHierarchical).RelationShip;
                    string Imageurl = (node1.Data as ComplexHierarchical).ImagePath;
                    <div class="e-orgchart-template-div-style">
                        <div id="image" class="e-orgchart-template-image-style" style="background-image: url(@(@Imageurl));">
                            <p style="margin-top:180px;margin-left:40px;font-weight: 500;
                    font-size: 14px;
                        line-height: 14px;"><b>@Name</b></p>
                        </div>

                    </div>
                }
            </NodeTemplate>
        </DiagramTemplates>
        <DataSourceSettings ID="Id" ParentID="ReportingPerson" DataSource="@DataSource"></DataSourceSettings>
        <Layout Type="LayoutType.ComplexHierarchicalTree" LinearArrangement="true" @bind-HorizontalSpacing="@HorizontalSpacing" @bind-VerticalSpacing="@VerticalSpacing">
        </Layout>
    </SfDiagramComponent>

    @code
    {
    SfDiagramComponent diagram;
    //Initializing layout.
    int HorizontalSpacing = 80;
    int VerticalSpacing = 80;

    //Creates node with some default values.
    private void OnNodeCreating(IDiagramObject obj)
    {
        Node node = obj as Node;
        node.Height = 200;
        node.Width = 140;
        ComplexHierarchical data = (node.Data as ComplexHierarchical);

        node.Shape = new Shape()
            {
                Type = NodeShapes.HTML,
            };
    }

    //Creates connectors with some default values.
    private void OnConnectorCreating(IDiagramObject connector)
    {
        Connector connector1 = (connector as Connector);
        connector1.Type = ConnectorSegmentType.Orthogonal;
        (connector as Connector).Style.StrokeWidth = 1;
        (connector as Connector).TargetDecorator.Height = 7;
        (connector as Connector).TargetDecorator.Width = 7;
        Node SourceNode = diagram.GetObject(connector1.SourceID) as Node;
        Node TargetNode = diagram.GetObject(connector1.TargetID) as Node;

        if (TargetNode != null)
        {
            ComplexHierarchical complexHierarchical = TargetNode.Data as ComplexHierarchical;
            if (complexHierarchical.RelationShip.Contains("InLaw"))
            {
                connector1.IsVisible = false;
            }

        }
    }

    public class ComplexHierarchical
    {
        public string Id { get; set; }
        public string RelationShip { get; set; }
        public List<string> ReportingPerson { get; set; }
        public string ImagePath { get; set; }
    }
    public object DataSource = new List<object>()
    {
        new ComplexHierarchical() { Id= "1",RelationShip="Dad",ImagePath="/diagram/images/people-circle26.png" },
        new ComplexHierarchical() { Id= "2",RelationShip="Mom",ImagePath="/diagram/images/people-circle0.png"},
        new ComplexHierarchical() { Id= "3",RelationShip="Brother",ImagePath="/diagram/images/people-circle23.png", ReportingPerson=new List<string>() {"1","2" }},
        new ComplexHierarchical() { Id= "4",RelationShip="Sister In Law",ImagePath="/diagram/images/people-circle21.png",ReportingPerson=new List<string>() {"1","2" }},
        new ComplexHierarchical() { Id= "5",RelationShip="Sister",ImagePath="/diagram/images/people-circle16.png", ReportingPerson=new List<string>() {"1","2" }},
        new ComplexHierarchical() { Id= "6",RelationShip="Brother In Law",ImagePath="/diagram/images/people-circle33.png",ReportingPerson=new List<string>() {"1","2" }},
        new ComplexHierarchical() { Id= "7",RelationShip="Sister",ImagePath="/diagram/images/people-circle11.png", ReportingPerson=new List<string>() {"1","2" }},
        new ComplexHierarchical() { Id= "8",RelationShip="Brother In Law",ImagePath="/diagram/images/people-circle31.png", ReportingPerson=new List<string>() {"1","2" }},
        new ComplexHierarchical() { Id= "9",RelationShip="Sister",ImagePath="/diagram/images/people-circle1.png", ReportingPerson=new List<string>() {"1","2" }},
        new ComplexHierarchical() { Id= "10",RelationShip="Nephew",ImagePath="/diagram/images/people-circle4.png", ReportingPerson=new List<string>() {"3","4" }},
        new ComplexHierarchical() { Id= "11",RelationShip="Niece",ImagePath="/diagram/images/people-circle29.png", ReportingPerson=new List<string>() {"5","6" }},
        new ComplexHierarchical() { Id= "12",RelationShip="Niece",ImagePath="/diagram/images/people-circle24.png", ReportingPerson=new List<string>() {"7","8" }},
    };
}
